#necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.neural_network import MLPClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.metrics import classification_report


# Load the dataset
file_path = "C:/Users/aimil/Downloads/Student_performance_data _.csv"
df = pd.read_csv(file_path)

# Split the data into features and target
X = df.drop(columns='GradeClass')
Y = df['GradeClass']

#train, test split the data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Standardizing the feature values
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# List of classifiers
classifiers = [
    ('SVM', SVC(kernel='linear')),
    ('Decision Tree', DecisionTreeClassifier()),
    ('Random Forest', RandomForestClassifier()),
    ('Gradient Boosting', GradientBoostingClassifier()),
    ('AdaBoost', AdaBoostClassifier()),
    ('KNN', KNeighborsClassifier()),
    ('Logistic Regression', LogisticRegression()),
    ('Naive Bayes', GaussianNB()),
    ('MLP', MLPClassifier(max_iter=300)),
    ('LDA', LinearDiscriminantAnalysis()),
    ('Gaussian Process', GaussianProcessClassifier())
]

# store the metrics
performance_metrics = {}

# Train and evaluate each classifier
for name, clf in classifiers:
    clf.fit(X_train, Y_train)
    Y_pred_train = clf.predict(X_train)
    Y_pred_test = clf.predict(X_test)
    
    train_accuracy = accuracy_score(Y_train, Y_pred_train)
    test_accuracy = accuracy_score(Y_test, Y_pred_test)
    precision = precision_score(Y_test, Y_pred_test)
    recall = recall_score(Y_test, Y_pred_test)
    f1 = f1_score(Y_test, Y_pred_test)

    # Combine train and test data
    X_combined = np.concatenate((X_train, X_test), axis=0)
    Y_combined = np.concatenate((Y_train, Y_test), axis=0)
    Y_pred_combined = clf.predict(X_combined)
    overall_accuracy = accuracy_score(Y_combined, Y_pred_combined)
    
    performance_metrics[name] = {
        'train_accuracy': train_accuracy,
        'test_accuracy': test_accuracy,
        'overall_accuracy': overall_accuracy,
        'precision': precision,
        'recall': recall,
        'f1_score': f1
    }
    
    print(f'{name} Classifier:')
    print(f'Training Accuracy: {train_accuracy:.4f}')
    print(f'Test Accuracy: {test_accuracy:.4f}')
    print(f'Overall Accuracy: {overall_accuracy:.4f}')
    print(f'Precision: {precision:.4f}')
    print(f'Recall: {recall:.4f}')
    print(f'F1 Score: {f1:.4f}')
    print(classification_report(Y_test, Y_pred_test))
    print('-' * 50)
